import pygame

from pygame.locals import *
from sys import exit
from random import randint

pygame.init()
pygame.mixer.music.set_volume(0.3)
musica_tema = pygame.mixer.music.load('BoxCat Games - Map Theme.mp3')
pygame.mixer.music.play(-1)

som_colisao = pygame.mixer.Sound('smw_coin.wav')

#criando tela
largura = 650
altura = 500
tela = pygame.display.set_mode((largura, altura))

#posiÃ§ao dos objetos
x_cobra = 300
y_cobra = 220
x_fruta = randint(20, 600)
y_fruta = randint(40, 450)

velocidade = 10
x_controle = velocidade
y_controle = 0

#contagem de pontos
pontos = 0
fonte = pygame.font.SysFont('arial', 30, bold=True, italic=True)

#alterando o nome do jogo
pygame.display.set_caption('Snake')

#controlando velocidade do jogo
relogio = pygame.time.Clock()

lista_cobra = []
comprimento = 5

def cresce_cobra(lista_cobra):
  for posicao in lista_cobra:
    pygame.draw.rect(tela, (0,255,0), (posicao[0],posicao[1],20,20))

def reiniciar_jogo():
  global pontos, lista_cobra, lista_cabeca, comprimento, x_cobra, x_fruta, y_cobra, y_fruta, vivo
  pontos = 0
  lista_cobra = []
  lista_cabeca = []
  comprimento = 5
  x_cobra = 300
  y_cobra = 220
  x_fruta = randint(0, 600)
  y_fruta = randint(0, 440)
  vivo = True

vivo = True
while True:
  relogio.tick(30)
  tela.fill((255, 255, 255))

  mensagem = (f'Pontos: {pontos}')
  texto_formatado = fonte.render(mensagem, True, (0,0,0))

  bordasup = pygame.draw.line(tela, (0, 0, 0), (6, 5), (635, 5), 5)
  bordaesq = pygame.draw.line(tela, (0, 0, 0), (6, 5), (6, 475), 5)
  bordadir = pygame.draw.line(tela, (0, 0, 0), (635, 0), (635, 475), 5)
  bordainf = pygame.draw.line(tela, (0, 0, 0), (6, 475), (635, 475), 5)
  cobra = pygame.draw.rect(tela, (0, 255, 0), (x_cobra, y_cobra, 20, 20))
  fruta = pygame.draw.rect(tela, (255, 0, 0), (x_fruta, y_fruta, 10, 10))

  for event in pygame.event.get():
    if event.type == QUIT:
      exit()

    if event.type == KEYDOWN:
      if event.key == K_LEFT and x_controle != +velocidade :
        x_controle = -velocidade
        y_controle = 0
      if event.key == K_RIGHT and x_controle != -velocidade:
        x_controle = velocidade
        y_controle = 0
      if event.key == K_UP and y_controle != velocidade:
        x_controle = 0
        y_controle = -velocidade
      if event.key == K_DOWN and y_controle != -velocidade:
        x_controle = 0
        y_controle = velocidade

  x_cobra += x_controle
  y_cobra += y_controle

  if cobra.colliderect(fruta):
    x_fruta = randint(0, 600)
    y_fruta = randint(0, 440)
    som_colisao.play()
    pontos += 1
    comprimento += 1

  lista_cabeca = []
  lista_cabeca.append(x_cobra)
  lista_cabeca.append(y_cobra)

  lista_cobra.append(lista_cabeca)
  if lista_cobra.count(lista_cabeca) > 1:
    mensagem_morte = pygame.font.SysFont('arial', 20, True, True)
    recado = 'Game Over! Pressione R para jogar novamente'
    texto_formatado2 = mensagem_morte.render(mensagem_morte, (0,0,0))
    vivo = False
    while not vivo:
      tela.fill((255,255,255))
      for event in pygame.event.get():
        if event.type == QUIT:
          exit()
        if event.type == KEYDOWN:
          if event.key == K_r:
            reiniciar_jogo()
      tela.blit(texto_formatado2, (largura/2, altura/2))

      pygame.display.update()
  if cobra.colliderect(bordadir) or cobra.colliderect(bordasup) or cobra.colliderect(bordaesq) or cobra.colliderect(bordainf):
    mensagem_morte = pygame.font.SysFont('arial', 20, True, True)
    recado = 'Game Over! Pressione R para jogar novamente'
    texto_formatado = mensagem_morte.render(mensagem_morte, (0, 0, 0))
    vivo = False
    while not vivo:
      tela.fill((255, 255, 255))
      for event in pygame.event.get():
        if event.type == QUIT:
          exit()
        if event.type == KEYDOWN:
          if event.key == K_r:
            reiniciar_jogo()
    tela.blit(texto_formatado, (largura / 2, altura / 2))
    pygame.display.update()

  if len(lista_cobra) > comprimento:
    del lista_cobra[0]

  cresce_cobra(lista_cobra)

  tela.blit(texto_formatado, (450,40))

  pygame.display.update()
